1. Monitoring Transaction ID Age and Freeze

WITH max_age AS (
    SELECT 2000000000 AS max_old_xid, setting AS autovacuum_freeze_max_age
    FROM pg_catalog.pg_settings
    WHERE name = 'autovacuum_freeze_max_age'
),
per_database_stats AS (
    SELECT datname,
           m.max_old_xid::int,
           m.autovacuum_freeze_max_age::int,
           age(d.datfrozenxid) AS oldest_current_xid
    FROM pg_catalog.pg_database d
    JOIN max_age m ON (true)
    WHERE d.datallowconn
)
SELECT max(oldest_current_xid) AS oldest_current_xid,
       max(ROUND(100 * (oldest_current_xid / max_old_xid::float))) AS percent_towards_wraparound,
       max(ROUND(100 * (oldest_current_xid / autovacuum_freeze_max_age::float))) AS percent_towards_emergency_autovac
FROM per_database_stats;

2. Identifying Table Bloat

SELECT c.oid::regclass AS relation_name,
       greatest(age(c.relfrozenxid), age(t.relfrozenxid)) AS age,
       pg_size_pretty(pg_table_size(c.oid)) AS table_size,
       c.relkind, 
       c.relpersistence
FROM pg_class c
LEFT JOIN pg_class t ON c.reltoastrelid = t.oid
WHERE c.relkind IN ('r', 't', 'm')
ORDER BY 2 DESC
LIMIT 20;


3. Monitoring Ongoing Vacuum Processes

SELECT datname,
       usename,
       pid,
       wait_event_type,
       wait_event,
       current_timestamp - xact_start AS xact_runtime,
       query
FROM pg_stat_activity
WHERE upper(query) LIKE '%VACUUM%'
ORDER BY xact_start;



4. Identifying Tables with Oldest Frozen Transaction IDs

SELECT c.relname AS table_name,
       c.relkind AS type,
       age(c.relfrozenxid) AS age,
       c.relfrozenxid
FROM pg_class AS c
WHERE age(c.relfrozenxid) <> 2147483647
ORDER BY 3 DESC
LIMIT 20;
